{"version":3,"file":"beagle-angular.js","sources":["ng://beagle-angular/runtime/beagle-context/context.ts","ng://beagle-angular/runtime/utils/promise.ts","ng://beagle-angular/errors.ts","ng://beagle-angular/runtime/errors.ts","ng://beagle-angular/runtime/AbstractBeagleRemoteView.ts","ng://beagle-angular/runtime/AbstractBeagleProvider.ts","ng://beagle-angular/constants.ts","ng://beagle-angular/runtime/BeagleComponent.ts","ng://beagle-angular/runtime/beagle-context/directive.ts","ng://beagle-angular/runtime/beagle-context/module.ts","ng://beagle-angular/decorator.ts","ng://beagle-angular/beagle-angular.ts"],"sourcesContent":["import { BeagleView } from '@zup-it/beagle-web'\nimport { findById } from '@zup-it/beagle-web/dist/utils/tree-reading'\nimport { BeagleContext } from '../../types'\n\nconst views: Record<string, BeagleView> = {}\n\nfunction createContext<T>(view: BeagleView<T>, elementId: string): BeagleContext<T> {\n  return {\n    replace: params => view.updateWithFetch(params, elementId, 'replace'),\n    append: params => view.updateWithFetch(params, elementId, 'append'),\n    prepend: params => view.updateWithFetch(params, elementId, 'prepend'),\n    updateWithTree: params => view.updateWithTree({ ...params, elementId }),\n    getElementId: () => elementId,\n    getElement: () => findById(view.getTree(), elementId),\n    getView: () => view\n  }\n}\n\nexport function getContext(viewId: string, elementId: string) {\n  if (!viewId || !elementId) throw Error('Beagle: getContext couldn\\'t find viewId or elementId')\n\n  const view = views[viewId]\n  if (!view) throw Error(`Beagle: getContext couldn\\'t find view with id ${viewId}`)\n\n  return createContext(view, elementId)\n}\n\nexport function registerView(viewId, view: BeagleView) {\n  views[viewId] = view\n}\n\nexport function unregisterView(viewId) {\n  delete views[viewId]\n}\n","export interface StaticPromise<T> {\n  resolve: (value: any) => void,\n  reject: (error: any) => void,\n  promise: Promise<T>,\n}\n\nexport function createStaticPromise<T = any>() {\n  const staticPromise: Partial<StaticPromise<T>> = {}\n\n  staticPromise.promise = new Promise((resolve, reject) => {\n    staticPromise.resolve = resolve\n    staticPromise.reject = reject\n  })\n\n  return staticPromise as StaticPromise<T>\n}","export default class BeagleError extends Error {\n  constructor(message?: string) {\n    super(message)\n    this.name = this.constructor.name\n  }\n}\n","import BeagleError from '../errors'\n\nexport default class BeagleRuntimeError extends BeagleError {\n  constructor(message: string) {\n    super(`Beagle runtime error: ${message}`)\n  }\n}\n","import {\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  NgZone,\n  TemplateRef,\n} from '@angular/core'\nimport { LoadParams, BeagleView, IdentifiableBeagleUIElement } from '@zup-it/beagle-web'\nimport { AbstractBeagleProvider } from './AbstractBeagleProvider'\nimport { registerView, unregisterView } from './beagle-context/context'\nimport { createStaticPromise } from './utils/promise'\nimport BeagleRuntimeError from './errors'\n\nlet nextViewId = 1\n\nexport abstract class AbstractBeagleRemoteView implements AfterViewInit, OnDestroy, OnChanges {\n  loadParams: LoadParams = { path: '' }\n  tree: IdentifiableBeagleUIElement<any>\n  view: BeagleView\n  viewId = `${nextViewId++}`\n  beagleProvider: AbstractBeagleProvider\n  ngZone: NgZone\n  changeDetector: ChangeDetectorRef\n  viewStaticPromise = createStaticPromise<BeagleView>()\n\n  constructor(\n    beagleProvider?: AbstractBeagleProvider,\n    ngZone?: NgZone,\n    changeDetector?: ChangeDetectorRef,\n  ) {\n    if (beagleProvider) this.beagleProvider = beagleProvider\n    if (ngZone) this.ngZone = ngZone\n    if (changeDetector) this.changeDetector = changeDetector\n  }\n\n  createBeagleView() {\n    const beagleService = this.beagleProvider.getBeagleUIService()\n    if (!beagleService) {\n      throw new BeagleRuntimeError(\n        'you need to start the beagle provider before using a remote view.',\n      )\n    }\n    this.view = beagleService.createView()\n    this.view.subscribe(this.updateView)\n    this.view.addErrorListener((errorListener) => {\n      errorListener.forEach((error) => {\n        console.error(error)\n      })\n    })\n    registerView(`${this.viewId}`, this.view)\n    this.viewStaticPromise.resolve(this.view)\n  }\n\n  getTemplate(componentName: IdentifiableBeagleUIElement<any>['type']): TemplateRef<any> {\n    if (!this[componentName]) {\n      console.warn(\n        `Beagle: the component ${componentName} was not declared in Beagle's configuration.`,\n      )\n    }\n    return this[componentName]\n  }\n\n  updateView = (uiTree: IdentifiableBeagleUIElement<any>) => {\n    this.ngZone.run(() => {\n      this.tree = uiTree\n      this.changeDetector.detectChanges()\n    })\n  }\n\n  elementIdentity(index: number, element: IdentifiableBeagleUIElement<any>) {\n    return element.id\n  }\n\n  getView() {\n    return this.viewStaticPromise.promise\n  }\n\n  ngAfterViewInit() {\n    if (!this.beagleProvider || !this.ngZone || !this.changeDetector) {\n      throw new BeagleRuntimeError(\n        '\"beagleProvider\", \"ngZone\" and \"changeDetector\" must be set before the AfterViewInit runs. Use the constructor or the component instance to set their values.',\n      )\n    }\n    this.createBeagleView()\n    this.view.updateWithFetch(this.loadParams)\n  }\n\n  async ngOnChanges(changes: SimpleChanges) {\n    if (changes && changes.loadParams) {\n      if (\n        changes.loadParams.previousValue\n        && changes.loadParams.previousValue !== changes.loadParams.currentValue\n      ) {\n        this.view.updateWithFetch(this.loadParams)\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    unregisterView(this.viewId)\n  }\n}\n","import createCoreBeagleUIService, { DefaultSchema } from '@zup-it/beagle-web'\nimport { BeagleAngularConfig, BeagleAngularUIService } from '../types'\n\nexport abstract class AbstractBeagleProvider {\n  private service: BeagleAngularUIService | undefined\n\n  start<Schema = DefaultSchema>(config: BeagleAngularConfig<Schema>) {\n    if (this.service) {\n      console.error('Beagle service has already started!')\n      return\n    }\n    // @ts-ignore // fixme\n    this.service = createCoreBeagleUIService<Schema>(config)\n  }\n\n  getBeagleUIService() {\n    return this.service\n  }\n}\n","export const viewIdAttributeName = '__beagle_view_id'\nexport const remoteViewSelector = 'beagle-remote-view'\nexport const contextSelector = 'beagle-context'\n","import { BeagleContext } from '../types'\n\nexport abstract class BeagleComponent {\n  public getBeagleContext: () => BeagleContext\n}\n","import { Directive, ViewContainerRef, ElementRef, OnInit, Input } from '@angular/core'\nimport { contextSelector } from '../../constants'\nimport { BeagleComponent } from '../BeagleComponent'\nimport { getContext } from './context'\n\n@Directive({\n  selector: `[${contextSelector}]`,\n})\nexport class BeagleContextDirective implements OnInit {\n  @Input() _elementId: string\n  @Input() _viewId: string\n\n  constructor(public viewContainerRef: ViewContainerRef, public elementRef: ElementRef) { }\n\n  ngOnInit() {\n    let component\n\n    // @ts-ignore\n    if (ng && typeof (ng.getComponent) === 'function') {\n      //IVY provides ng.getComponent function whereas other versions don't\n      // @ts-ignore\n      component = ng.getComponent(this.elementRef.nativeElement)\n    } else {\n      \n      // @ts-ignore\n      component = this.viewContainerRef._data?.componentView?.component\n    }\n    if (component instanceof BeagleComponent) {\n      component.getBeagleContext = () => getContext(this._viewId, this._elementId)\n    }\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { BeagleContextDirective } from './directive'\n\n@NgModule({\n  declarations: [BeagleContextDirective],\n  exports: [BeagleContextDirective],\n})\nexport class BeagleContextModule {}\n","import { Type } from '@angular/core'\nimport { DefaultSchema } from '@zup-it/beagle-web'\nimport 'reflect-metadata'\nimport { BeagleAngularConfig } from './types'\n\nexport function BeagleModule<Schema = DefaultSchema>(config: BeagleAngularConfig<Schema>) {\n  return function (target: Type<any>) {\n    Reflect.defineMetadata('beagleConfig', config, target)\n  }\n}\n\nexport function getBeagleConfigMetadata(beagleModuleClass: Type<any>) {\n  return Reflect.getMetadata('beagleConfig', beagleModuleClass)\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {contextSelector as ɵb} from './constants';\nexport {BeagleContextDirective as ɵa} from './runtime/beagle-context/directive';"],"names":[],"mappings":"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"}
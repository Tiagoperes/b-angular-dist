import { __awaiter } from "tslib";
import { registerView, unregisterView } from './context';
let nextViewId = 1;
export class BeagleRemoteView {
    constructor(beagleProvider, ngZone, changeDetector) {
        this.loadParams = { path: '' };
        this.viewId = `${nextViewId++}`;
        this.updateView = (uiTree) => {
            this.ngZone.run(() => {
                this.tree = uiTree;
                this.changeDetector.detectChanges();
            });
        };
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        const beagleService = beagleProvider.getBeagleUIService();
        if (!beagleService) {
            throw new Error('Beagle: you need to start the beagle provider before using a remote view.');
        }
        this.view = beagleService.createView();
        this.view.subscribe(this.updateView);
        registerView(`${this.viewId}`, this.view);
    }
    getTemplate(componentName) {
        return this[componentName];
    }
    ngAfterViewInit() {
        this.view.updateWithFetch(this.loadParams);
    }
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (changes && changes.loadParams) {
                if (changes.loadParams.previousValue
                    && changes.loadParams.previousValue !== changes.loadParams.currentValue) {
                    this.view.updateWithFetch(this.loadParams);
                }
            }
        });
    }
    ngOnDestroy() {
        unregisterView(this.viewId);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmVhZ2xlUmVtb3RlVmlldy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2JlYWdsZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiQmVhZ2xlUmVtb3RlVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsT0FBTyxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFeEQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFBO0FBRWxCLE1BQU0sT0FBZ0IsZ0JBQWdCO0lBUXBDLFlBQ0UsY0FBOEIsRUFDOUIsTUFBYyxFQUNkLGNBQWlDO1FBVm5DLGVBQVUsR0FBZSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQTtRQUdyQyxXQUFNLEdBQUcsR0FBRyxVQUFVLEVBQUUsRUFBRSxDQUFBO1FBd0IxQixlQUFVLEdBQUcsQ0FBQyxNQUE0QixFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO2dCQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQTtnQkFDbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtZQUNyQyxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtRQXBCQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUNwQixJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQTtRQUNwQyxNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsQ0FBQTtRQUN6RCxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkVBQTJFLENBQUMsQ0FBQTtTQUM3RjtRQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNwQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzNDLENBQUM7SUFFRCxXQUFXLENBQUMsYUFBMkM7UUFDckQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDNUIsQ0FBQztJQVNELGVBQWU7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQUVLLFdBQVcsQ0FBQyxPQUFzQjs7WUFDdEMsSUFBRyxPQUFPLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtnQkFDaEMsSUFDRSxPQUFPLENBQUMsVUFBVSxDQUFDLGFBQWE7dUJBQzdCLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxLQUFLLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUN2RTtvQkFDQSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7aUJBQzNDO2FBQ0Y7UUFDSCxDQUFDO0tBQUE7SUFFRCxXQUFXO1FBQ1QsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUM3QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBPbkRlc3Ryb3ksXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIE5nWm9uZSxcbiAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBCZWFnbGVQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXInXG5pbXBvcnQgeyBMb2FkUGFyYW1zLCBCZWFnbGVWaWV3LCBCZWFnbGVVSUVsZW1lbnQgfSBmcm9tICdiZWFnbGUtd2ViJ1xuaW1wb3J0IHsgcmVnaXN0ZXJWaWV3LCB1bnJlZ2lzdGVyVmlldyB9IGZyb20gJy4vY29udGV4dCdcblxubGV0IG5leHRWaWV3SWQgPSAxXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCZWFnbGVSZW1vdGVWaWV3IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICBsb2FkUGFyYW1zOiBMb2FkUGFyYW1zID0geyBwYXRoOiAnJyB9XG4gIHRyZWU6IEJlYWdsZVVJRWxlbWVudDxhbnk+XG4gIHZpZXc6IEJlYWdsZVZpZXdcbiAgdmlld0lkID0gYCR7bmV4dFZpZXdJZCsrfWBcbiAgbmdab25lOiBOZ1pvbmVcbiAgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmXG5cbiAgY29uc3RydWN0b3IoXG4gICAgYmVhZ2xlUHJvdmlkZXI6IEJlYWdsZVByb3ZpZGVyLFxuICAgIG5nWm9uZTogTmdab25lLFxuICAgIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgKSB7XG4gICAgdGhpcy5uZ1pvbmUgPSBuZ1pvbmVcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yID0gY2hhbmdlRGV0ZWN0b3JcbiAgICBjb25zdCBiZWFnbGVTZXJ2aWNlID0gYmVhZ2xlUHJvdmlkZXIuZ2V0QmVhZ2xlVUlTZXJ2aWNlKClcbiAgICBpZiAoIWJlYWdsZVNlcnZpY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmVhZ2xlOiB5b3UgbmVlZCB0byBzdGFydCB0aGUgYmVhZ2xlIHByb3ZpZGVyIGJlZm9yZSB1c2luZyBhIHJlbW90ZSB2aWV3LicpXG4gICAgfVxuICAgIHRoaXMudmlldyA9IGJlYWdsZVNlcnZpY2UuY3JlYXRlVmlldygpXG4gICAgdGhpcy52aWV3LnN1YnNjcmliZSh0aGlzLnVwZGF0ZVZpZXcpXG4gICAgcmVnaXN0ZXJWaWV3KGAke3RoaXMudmlld0lkfWAsIHRoaXMudmlldylcbiAgfVxuXG4gIGdldFRlbXBsYXRlKGNvbXBvbmVudE5hbWU6IEJlYWdsZVVJRWxlbWVudDxhbnk+Wyd0eXBlJ10pOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpc1tjb21wb25lbnROYW1lXVxuICB9XG5cbiAgdXBkYXRlVmlldyA9ICh1aVRyZWU6IEJlYWdsZVVJRWxlbWVudDxhbnk+KSA9PiB7XG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMudHJlZSA9IHVpVHJlZVxuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKClcbiAgICB9KVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMudmlldy51cGRhdGVXaXRoRmV0Y2godGhpcy5sb2FkUGFyYW1zKVxuICB9XG5cbiAgYXN5bmMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmKGNoYW5nZXMgJiYgY2hhbmdlcy5sb2FkUGFyYW1zKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNoYW5nZXMubG9hZFBhcmFtcy5wcmV2aW91c1ZhbHVlXG4gICAgICAgICYmIGNoYW5nZXMubG9hZFBhcmFtcy5wcmV2aW91c1ZhbHVlICE9PSBjaGFuZ2VzLmxvYWRQYXJhbXMuY3VycmVudFZhbHVlXG4gICAgICApIHtcbiAgICAgICAgdGhpcy52aWV3LnVwZGF0ZVdpdGhGZXRjaCh0aGlzLmxvYWRQYXJhbXMpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdW5yZWdpc3RlclZpZXcodGhpcy52aWV3SWQpXG4gIH1cbn1cbiJdfQ==
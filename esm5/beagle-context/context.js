import { __assign } from "tslib";
import { findById } from 'beagle-web/dist/utils/tree-reading';
var views = {};
function createContext(view, elementId) {
    return {
        replace: function (params) { return view.updateWithFetch(params, elementId, 'replace'); },
        append: function (params) { return view.updateWithFetch(params, elementId, 'append'); },
        prepend: function (params) { return view.updateWithFetch(params, elementId, 'prepend'); },
        updateWithTree: function (params) { return view.updateWithTree(__assign(__assign({}, params), { elementId: elementId })); },
        getElementId: function () { return elementId; },
        getElement: function () { return findById(view.getTree(), elementId); },
        getView: function () { return view; }
    };
}
export function getContext(viewId, elementId) {
    if (!viewId || !elementId)
        throw Error('Beagle: getContext couldn\'t find viewId or elementId');
    var view = views[viewId];
    if (!view)
        throw Error("Beagle: getContext couldn't find view with id " + viewId);
    return createContext(view, elementId);
}
export function registerView(viewId, view) {
    views[viewId] = view;
}
export function unregisterView(viewId) {
    delete views[viewId];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2JlYWdsZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYmVhZ2xlLWNvbnRleHQvY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9DQUFvQyxDQUFBO0FBRzdELElBQU0sS0FBSyxHQUErQixFQUFFLENBQUE7QUFFNUMsU0FBUyxhQUFhLENBQUksSUFBbUIsRUFBRSxTQUFpQjtJQUM5RCxPQUFPO1FBQ0wsT0FBTyxFQUFFLFVBQUEsTUFBTSxJQUFJLE9BQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUFsRCxDQUFrRDtRQUNyRSxNQUFNLEVBQUUsVUFBQSxNQUFNLElBQUksT0FBQSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLEVBQWpELENBQWlEO1FBQ25FLE9BQU8sRUFBRSxVQUFBLE1BQU0sSUFBSSxPQUFBLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsRUFBbEQsQ0FBa0Q7UUFDckUsY0FBYyxFQUFFLFVBQUEsTUFBTSxJQUFJLE9BQUEsSUFBSSxDQUFDLGNBQWMsdUJBQU0sTUFBTSxLQUFFLFNBQVMsV0FBQSxJQUFHLEVBQTdDLENBQTZDO1FBQ3ZFLFlBQVksRUFBRSxjQUFNLE9BQUEsU0FBUyxFQUFULENBQVM7UUFDN0IsVUFBVSxFQUFFLGNBQU0sT0FBQSxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFuQyxDQUFtQztRQUNyRCxPQUFPLEVBQUUsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJO0tBQ3BCLENBQUE7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFjLEVBQUUsU0FBaUI7SUFDMUQsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLFNBQVM7UUFBRSxNQUFNLEtBQUssQ0FBQyx1REFBdUQsQ0FBQyxDQUFBO0lBRS9GLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUMxQixJQUFJLENBQUMsSUFBSTtRQUFFLE1BQU0sS0FBSyxDQUFDLG1EQUFrRCxNQUFRLENBQUMsQ0FBQTtJQUVsRixPQUFPLGFBQWEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUE7QUFDdkMsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsTUFBTSxFQUFFLElBQWdCO0lBQ25ELEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUE7QUFDdEIsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsTUFBTTtJQUNuQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVhZ2xlVmlldyB9IGZyb20gJ2JlYWdsZS13ZWInXG5pbXBvcnQgeyBmaW5kQnlJZCB9IGZyb20gJ2JlYWdsZS13ZWIvZGlzdC91dGlscy90cmVlLXJlYWRpbmcnXG5pbXBvcnQgeyBCZWFnbGVDb250ZXh0IH0gZnJvbSAnLi4vdHlwZXMnXG5cbmNvbnN0IHZpZXdzOiBSZWNvcmQ8c3RyaW5nLCBCZWFnbGVWaWV3PiA9IHt9XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQ8VD4odmlldzogQmVhZ2xlVmlldzxUPiwgZWxlbWVudElkOiBzdHJpbmcpOiBCZWFnbGVDb250ZXh0PFQ+IHtcbiAgcmV0dXJuIHtcbiAgICByZXBsYWNlOiBwYXJhbXMgPT4gdmlldy51cGRhdGVXaXRoRmV0Y2gocGFyYW1zLCBlbGVtZW50SWQsICdyZXBsYWNlJyksXG4gICAgYXBwZW5kOiBwYXJhbXMgPT4gdmlldy51cGRhdGVXaXRoRmV0Y2gocGFyYW1zLCBlbGVtZW50SWQsICdhcHBlbmQnKSxcbiAgICBwcmVwZW5kOiBwYXJhbXMgPT4gdmlldy51cGRhdGVXaXRoRmV0Y2gocGFyYW1zLCBlbGVtZW50SWQsICdwcmVwZW5kJyksXG4gICAgdXBkYXRlV2l0aFRyZWU6IHBhcmFtcyA9PiB2aWV3LnVwZGF0ZVdpdGhUcmVlKHsgLi4ucGFyYW1zLCBlbGVtZW50SWQgfSksXG4gICAgZ2V0RWxlbWVudElkOiAoKSA9PiBlbGVtZW50SWQsXG4gICAgZ2V0RWxlbWVudDogKCkgPT4gZmluZEJ5SWQodmlldy5nZXRUcmVlKCksIGVsZW1lbnRJZCksXG4gICAgZ2V0VmlldzogKCkgPT4gdmlld1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0KHZpZXdJZDogc3RyaW5nLCBlbGVtZW50SWQ6IHN0cmluZykge1xuICBpZiAoIXZpZXdJZCB8fCAhZWxlbWVudElkKSB0aHJvdyBFcnJvcignQmVhZ2xlOiBnZXRDb250ZXh0IGNvdWxkblxcJ3QgZmluZCB2aWV3SWQgb3IgZWxlbWVudElkJylcblxuICBjb25zdCB2aWV3ID0gdmlld3Nbdmlld0lkXVxuICBpZiAoIXZpZXcpIHRocm93IEVycm9yKGBCZWFnbGU6IGdldENvbnRleHQgY291bGRuXFwndCBmaW5kIHZpZXcgd2l0aCBpZCAke3ZpZXdJZH1gKVxuXG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHZpZXcsIGVsZW1lbnRJZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyVmlldyh2aWV3SWQsIHZpZXc6IEJlYWdsZVZpZXcpIHtcbiAgdmlld3Nbdmlld0lkXSA9IHZpZXdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXJWaWV3KHZpZXdJZCkge1xuICBkZWxldGUgdmlld3Nbdmlld0lkXVxufVxuIl19
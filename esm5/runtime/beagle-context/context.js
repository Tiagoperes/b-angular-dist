import { __assign } from "tslib";
import { findById } from 'beagle-web/dist/utils/tree-reading';
var views = {};
function createContext(view, elementId) {
    return {
        replace: function (params) { return view.updateWithFetch(params, elementId, 'replace'); },
        append: function (params) { return view.updateWithFetch(params, elementId, 'append'); },
        prepend: function (params) { return view.updateWithFetch(params, elementId, 'prepend'); },
        updateWithTree: function (params) { return view.updateWithTree(__assign(__assign({}, params), { elementId: elementId })); },
        getElementId: function () { return elementId; },
        getElement: function () { return findById(view.getTree(), elementId); },
        getView: function () { return view; }
    };
}
export function getContext(viewId, elementId) {
    if (!viewId || !elementId)
        throw Error('Beagle: getContext couldn\'t find viewId or elementId');
    var view = views[viewId];
    if (!view)
        throw Error("Beagle: getContext couldn't find view with id " + viewId);
    return createContext(view, elementId);
}
export function registerView(viewId, view) {
    views[viewId] = view;
}
export function unregisterView(viewId) {
    delete views[viewId];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2JlYWdsZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsicnVudGltZS9iZWFnbGUtY29udGV4dC9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0NBQW9DLENBQUE7QUFHN0QsSUFBTSxLQUFLLEdBQStCLEVBQUUsQ0FBQTtBQUU1QyxTQUFTLGFBQWEsQ0FBSSxJQUFtQixFQUFFLFNBQWlCO0lBQzlELE9BQU87UUFDTCxPQUFPLEVBQUUsVUFBQSxNQUFNLElBQUksT0FBQSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLEVBQWxELENBQWtEO1FBQ3JFLE1BQU0sRUFBRSxVQUFBLE1BQU0sSUFBSSxPQUFBLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBakQsQ0FBaUQ7UUFDbkUsT0FBTyxFQUFFLFVBQUEsTUFBTSxJQUFJLE9BQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUFsRCxDQUFrRDtRQUNyRSxjQUFjLEVBQUUsVUFBQSxNQUFNLElBQUksT0FBQSxJQUFJLENBQUMsY0FBYyx1QkFBTSxNQUFNLEtBQUUsU0FBUyxXQUFBLElBQUcsRUFBN0MsQ0FBNkM7UUFDdkUsWUFBWSxFQUFFLGNBQU0sT0FBQSxTQUFTLEVBQVQsQ0FBUztRQUM3QixVQUFVLEVBQUUsY0FBTSxPQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxDQUFDLEVBQW5DLENBQW1DO1FBQ3JELE9BQU8sRUFBRSxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUk7S0FDcEIsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLE1BQWMsRUFBRSxTQUFpQjtJQUMxRCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUztRQUFFLE1BQU0sS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUE7SUFFL0YsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzFCLElBQUksQ0FBQyxJQUFJO1FBQUUsTUFBTSxLQUFLLENBQUMsbURBQWtELE1BQVEsQ0FBQyxDQUFBO0lBRWxGLE9BQU8sYUFBYSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUN2QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBZ0I7SUFDbkQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQTtBQUN0QixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUFNO0lBQ25DLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWFnbGVWaWV3IH0gZnJvbSAnYmVhZ2xlLXdlYidcbmltcG9ydCB7IGZpbmRCeUlkIH0gZnJvbSAnYmVhZ2xlLXdlYi9kaXN0L3V0aWxzL3RyZWUtcmVhZGluZydcbmltcG9ydCB7IEJlYWdsZUNvbnRleHQgfSBmcm9tICcuLi8uLi90eXBlcydcblxuY29uc3Qgdmlld3M6IFJlY29yZDxzdHJpbmcsIEJlYWdsZVZpZXc+ID0ge31cblxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dDxUPih2aWV3OiBCZWFnbGVWaWV3PFQ+LCBlbGVtZW50SWQ6IHN0cmluZyk6IEJlYWdsZUNvbnRleHQ8VD4ge1xuICByZXR1cm4ge1xuICAgIHJlcGxhY2U6IHBhcmFtcyA9PiB2aWV3LnVwZGF0ZVdpdGhGZXRjaChwYXJhbXMsIGVsZW1lbnRJZCwgJ3JlcGxhY2UnKSxcbiAgICBhcHBlbmQ6IHBhcmFtcyA9PiB2aWV3LnVwZGF0ZVdpdGhGZXRjaChwYXJhbXMsIGVsZW1lbnRJZCwgJ2FwcGVuZCcpLFxuICAgIHByZXBlbmQ6IHBhcmFtcyA9PiB2aWV3LnVwZGF0ZVdpdGhGZXRjaChwYXJhbXMsIGVsZW1lbnRJZCwgJ3ByZXBlbmQnKSxcbiAgICB1cGRhdGVXaXRoVHJlZTogcGFyYW1zID0+IHZpZXcudXBkYXRlV2l0aFRyZWUoeyAuLi5wYXJhbXMsIGVsZW1lbnRJZCB9KSxcbiAgICBnZXRFbGVtZW50SWQ6ICgpID0+IGVsZW1lbnRJZCxcbiAgICBnZXRFbGVtZW50OiAoKSA9PiBmaW5kQnlJZCh2aWV3LmdldFRyZWUoKSwgZWxlbWVudElkKSxcbiAgICBnZXRWaWV3OiAoKSA9PiB2aWV3XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRleHQodmlld0lkOiBzdHJpbmcsIGVsZW1lbnRJZDogc3RyaW5nKSB7XG4gIGlmICghdmlld0lkIHx8ICFlbGVtZW50SWQpIHRocm93IEVycm9yKCdCZWFnbGU6IGdldENvbnRleHQgY291bGRuXFwndCBmaW5kIHZpZXdJZCBvciBlbGVtZW50SWQnKVxuXG4gIGNvbnN0IHZpZXcgPSB2aWV3c1t2aWV3SWRdXG4gIGlmICghdmlldykgdGhyb3cgRXJyb3IoYEJlYWdsZTogZ2V0Q29udGV4dCBjb3VsZG5cXCd0IGZpbmQgdmlldyB3aXRoIGlkICR7dmlld0lkfWApXG5cbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQodmlldywgZWxlbWVudElkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJWaWV3KHZpZXdJZCwgdmlldzogQmVhZ2xlVmlldykge1xuICB2aWV3c1t2aWV3SWRdID0gdmlld1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5yZWdpc3RlclZpZXcodmlld0lkKSB7XG4gIGRlbGV0ZSB2aWV3c1t2aWV3SWRdXG59XG4iXX0=